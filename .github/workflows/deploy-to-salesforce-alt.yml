name: Salesforce CI/CD Deploy (Alternative)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository (full history)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Step 3: Install Salesforce CLI (Alternative method)
      - name: Install Salesforce CLI
        run: |
          echo "üì¶ Installing Salesforce CLI..."
          # Method 1: Try official npm package
          npm install @salesforce/cli --global || {
            echo "‚ö†Ô∏è Method 1 failed, trying alternative installation..."
            # Method 2: Direct download and install
            wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
            tar xJf sf-linux-x64.tar.xz
            sudo mv sf /usr/local/bin/
          }
          
          # Verify installation
          echo "‚úÖ Verifying Salesforce CLI installation..."
          sf --version
          sf plugins --core

      # Step 4: Authenticate with Salesforce
      - name: Authenticate with Salesforce Org
        run: |
          echo "üîê Authenticating with Salesforce..."
          echo "${{ secrets.SF_JWT_KEY }}" > server.key
          chmod 600 server.key
          
          sf org login jwt \
            --client-id ${{ secrets.SF_CONSUMER_KEY }} \
            --jwt-key-file server.key \
            --username ${{ secrets.SF_USERNAME }} \
            --instance-url ${{ secrets.SF_INSTANCE_URL }} \
            --alias ci-org \
            --set-default

      # Step 5: Verify authentication
      - name: Verify Salesforce Authentication
        run: |
          echo "üîç Verifying Salesforce authentication..."
          sf org list
          sf org display --target-org ci-org

      # Step 6: Detect changed metadata files
      - name: Detect changed metadata
        id: detect
        run: |
          echo "üîç Detecting changed metadata files..."
          
          # Debug: Show current branch and commit info
          echo "Current branch: $(git branch --show-current)"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Remote branches:"
          git branch -r
          
          # Ensure we have the latest remote info
          git fetch origin main || true
          
          # Try multiple strategies to find changed files
          CHANGED_FILES=""
          
          # Strategy 1: Compare with previous commit if this is not the first commit
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            echo "üìã Strategy 1: Comparing with previous commit..."
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^force-app/" || true)
          fi
          
          # Strategy 2: If no changes found and we have remote main, compare with remote
          if [ -z "$CHANGED_FILES" ] && git rev-parse --verify origin/main >/dev/null 2>&1; then
            echo "üìã Strategy 2: Comparing with origin/main..."
            MERGE_BASE=$(git merge-base HEAD origin/main 2>/dev/null || echo "")
            if [ -n "$MERGE_BASE" ]; then
              CHANGED_FILES=$(git diff --name-only $MERGE_BASE HEAD | grep "^force-app/" || true)
            else
              CHANGED_FILES=$(git diff --name-only origin/main HEAD | grep "^force-app/" || true)
            fi
          fi
          
          # Strategy 3: If still no changes, check all force-app files in current commit
          if [ -z "$CHANGED_FILES" ]; then
            echo "üìã Strategy 3: Checking all files in force-app (fallback)..."
            CHANGED_FILES=$(git ls-tree -r --name-only HEAD | grep "^force-app/" || true)
          fi
          
          echo "üìÇ Changed files detected:"
          echo "$CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "‚ö†Ô∏è No force-app files detected!"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
            exit 0
          else
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi
          
          # Process Apex classes and triggers
          echo "üîç Processing Apex files..."
          APEX_FILES=$(echo "$CHANGED_FILES" | grep -E "\.(cls|trigger)$" || true)
          APEX_DIRS=""
          if [ -n "$APEX_FILES" ]; then
            # Get unique directories containing Apex files
            APEX_DIRS=$(echo "$CHANGED_FILES" | grep -E "/classes/.*\.(cls|trigger)$" | sed 's|/[^/]*$||' | sort -u || true)
          fi
          
          echo "APEX_FILES<<EOF" >> $GITHUB_ENV
          echo "$APEX_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "APEX_DIRS<<EOF" >> $GITHUB_ENV
          echo "$APEX_DIRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Process LWC components
          echo "üîç Processing LWC files..."
          LWC_COMPONENTS=""
          if echo "$CHANGED_FILES" | grep -q "/lwc/"; then
            LWC_COMPONENTS=$(echo "$CHANGED_FILES" | grep "/lwc/" | sed -n 's|.*force-app/main/default/lwc/\([^/]*\)/.*|\1|p' | sort -u || true)
          fi
          
          echo "LWC_COMPONENTS<<EOF" >> $GITHUB_ENV
          echo "$LWC_COMPONENTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Process Aura components
          echo "üîç Processing Aura files..."
          AURA_COMPONENTS=""
          if echo "$CHANGED_FILES" | grep -q "/aura/"; then
            AURA_COMPONENTS=$(echo "$CHANGED_FILES" | grep "/aura/" | sed -n 's|.*force-app/main/default/aura/\([^/]*\)/.*|\1|p' | sort -u || true)
          fi
          
          echo "AURA_COMPONENTS<<EOF" >> $GITHUB_ENV
          echo "$AURA_COMPONENTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Process Static Resources
          echo "üîç Processing Static Resource files..."
          STATIC_RESOURCES=""
          if echo "$CHANGED_FILES" | grep -q "/staticresources/"; then
            STATIC_RESOURCES=$(echo "$CHANGED_FILES" | grep "/staticresources/" | sed -n 's|.*force-app/main/default/staticresources/\([^/]*\).*|\1|p' | sort -u || true)
          fi
          
          echo "STATIC_RESOURCES<<EOF" >> $GITHUB_ENV
          echo "$STATIC_RESOURCES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Process other metadata types
          echo "üîç Processing other metadata files..."
          OTHER_METADATA=""
          OTHER_METADATA=$(echo "$CHANGED_FILES" | grep -v -E "/(classes|lwc|aura|staticresources)/" | grep "^force-app/" || true)
          
          echo "OTHER_METADATA<<EOF" >> $GITHUB_ENV
          echo "$OTHER_METADATA" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Summary
          echo "üìä Detection Summary:"
          echo "- Apex files: $(echo "$APEX_FILES" | wc -l)"
          echo "- LWC components: $(echo "$LWC_COMPONENTS" | wc -l)"
          echo "- Aura components: $(echo "$AURA_COMPONENTS" | wc -l)"
          echo "- Static resources: $(echo "$STATIC_RESOURCES" | wc -l)"
          echo "- Other metadata: $(echo "$OTHER_METADATA" | wc -l)"

      # Step 7: Deploy Apex files
      - name: Deploy Apex Classes and Triggers
        if: env.HAS_CHANGES == 'true' && env.APEX_DIRS != ''
        run: |
          echo "üöÄ Deploying Apex classes and triggers..."
          echo "Apex directories to deploy:"
          echo "$APEX_DIRS"
          
          # Deploy all Apex directories at once for better efficiency
          DEPLOY_DIRS=$(echo "$APEX_DIRS" | tr '\n' ' ')
          if [ -n "$DEPLOY_DIRS" ]; then
            sf project deploy start --source-dir $DEPLOY_DIRS --target-org ci-org --test-level RunLocalTests --wait 10
          fi

      # Step 8: Deploy LWC components
      - name: Deploy LWC Components
        if: env.HAS_CHANGES == 'true' && env.LWC_COMPONENTS != ''
        run: |
          echo "üöÄ Deploying LWC components..."
          echo "LWC components to deploy:"
          echo "$LWC_COMPONENTS"
          
          # Deploy each LWC component directory
          echo "$LWC_COMPONENTS" | while read -r component; do
            if [ -n "$component" ]; then
              echo "Deploying LWC component: $component"
              sf project deploy start --source-dir "force-app/main/default/lwc/$component" --target-org ci-org --test-level NoTestRun --wait 5
            fi
          done

      # Step 9: Deploy Aura components
      - name: Deploy Aura Components
        if: env.HAS_CHANGES == 'true' && env.AURA_COMPONENTS != ''
        run: |
          echo "üöÄ Deploying Aura components..."
          echo "Aura components to deploy:"
          echo "$AURA_COMPONENTS"
          
          # Deploy each Aura component directory
          echo "$AURA_COMPONENTS" | while read -r component; do
            if [ -n "$component" ]; then
              echo "Deploying Aura component: $component"
              sf project deploy start --source-dir "force-app/main/default/aura/$component" --target-org ci-org --test-level NoTestRun --wait 5
            fi
          done

      # Step 10: Deploy Static Resources
      - name: Deploy Static Resources
        if: env.HAS_CHANGES == 'true' && env.STATIC_RESOURCES != ''
        run: |
          echo "üöÄ Deploying Static Resources..."
          echo "Static resources to deploy:"
          echo "$STATIC_RESOURCES"
          
          # Deploy each static resource
          echo "$STATIC_RESOURCES" | while read -r resource; do
            if [ -n "$resource" ]; then
              echo "Deploying Static Resource: $resource"
              # For static resources, we might need to deploy the entire staticresources folder or specific files
              if [ -d "force-app/main/default/staticresources/$resource" ]; then
                sf project deploy start --source-dir "force-app/main/default/staticresources/$resource" --target-org ci-org --test-level NoTestRun --wait 5
              else
                # If it's a file, deploy the staticresources directory
                sf project deploy start --source-dir "force-app/main/default/staticresources" --target-org ci-org --test-level NoTestRun --wait 5
                break  # Only need to deploy once if deploying the whole directory
              fi
            fi
          done

      # Step 11: Deploy other metadata
      - name: Deploy Other Metadata
        if: env.HAS_CHANGES == 'true' && env.OTHER_METADATA != ''
        run: |
          echo "üöÄ Deploying other metadata..."
          echo "Other metadata to deploy:"
          echo "$OTHER_METADATA"
          
          # For other metadata, deploy the entire force-app directory to ensure dependencies are met
          sf project deploy start --source-dir "force-app/main/default" --target-org ci-org --test-level RunLocalTests --wait 10

      # Step 12: Skip deploy if nothing changed
      - name: Skip deploy
        if: env.HAS_CHANGES == 'false'
        run: echo "‚úÖ No Salesforce metadata changes detected. Skipping deployment."

      # Step 13: Deployment summary
      - name: Deployment Summary
        if: env.HAS_CHANGES == 'true'
        run: |
          echo "üéâ Deployment Summary:"
          echo "‚úÖ Successfully deployed selective Salesforce metadata changes"
          if [ -n "$APEX_DIRS" ]; then
            echo "üìã Apex: $(echo "$APEX_DIRS" | wc -l) directories"
          fi
          if [ -n "$LWC_COMPONENTS" ]; then
            echo "‚ö° LWC: $(echo "$LWC_COMPONENTS" | wc -l) components"
          fi
          if [ -n "$AURA_COMPONENTS" ]; then
            echo "üî• Aura: $(echo "$AURA_COMPONENTS" | wc -l) components"  
          fi
          if [ -n "$STATIC_RESOURCES" ]; then
            echo "üìÅ Static Resources: $(echo "$STATIC_RESOURCES" | wc -l) resources"
          fi
          if [ -n "$OTHER_METADATA" ]; then
            echo "üîß Other Metadata: $(echo "$OTHER_METADATA" | wc -l) files"
          fi

      # Step 14: Cleanup
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          rm -f server.key
          echo "‚úÖ Cleanup complete"