name: Salesforce CI/CD Deploy (Selective)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository (fetch full history to compare changes)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      # Step 3: Install Salesforce CLI
      - name: Install Salesforce CLI
        run: npm install sfdx-cli@latest --global

      # Step 4: Authenticate with Salesforce Org
      - name: Authenticate with Salesforce Org
        run: |
          echo "${{ secrets.SF_JWT_KEY }}" > server.key
          sf auth:jwt:grant \
            --client-id ${{ secrets.SF_CONSUMER_KEY }} \
            --jwt-key-file server.key \
            --username ${{ secrets.SF_USERNAME }} \
            --instance-url ${{ secrets.SF_INSTANCE_URL }} \
            --set-default

      # Step 5: Detect changed metadata files
      - name: Detect changed metadata
        id: detect
        run: |
          echo "üîç Detecting changed files..."
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          echo "$CHANGED_FILES"

          # Apex classes
          APEX_FILES=$(echo "$CHANGED_FILES" | grep "^force-app/.*/classes/.*\.cls$")
          echo "Apex files: $APEX_FILES"
          echo "APEX_FILES<<EOF" >> $GITHUB_ENV
          echo "$APEX_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # LWC
          LWC_DIRS=$(echo "$CHANGED_FILES" | grep "^force-app/.*/lwc/" | xargs -n1 dirname | sort -u)
          echo "LWC dirs: $LWC_DIRS"
          echo "LWC_DIRS<<EOF" >> $GITHUB_ENV
          echo "$LWC_DIRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Aura
          AURA_DIRS=$(echo "$CHANGED_FILES" | grep "^force-app/.*/aura/" | xargs -n1 dirname | sort -u)
          echo "Aura dirs: $AURA_DIRS"
          echo "AURA_DIRS<<EOF" >> $GITHUB_ENV
          echo "$AURA_DIRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # StaticResources
          STATIC_DIRS=$(echo "$CHANGED_FILES" | grep "^force-app/.*/staticresources/" | xargs -n1 dirname | sort -u)
          echo "StaticResource dirs: $STATIC_DIRS"
          echo "STATIC_DIRS<<EOF" >> $GITHUB_ENV
          echo "$STATIC_DIRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 6: Deploy Apex classes
      - name: Deploy Apex files
        if: env.APEX_FILES != ''
        run: |
          echo "üöÄ Deploying Apex classes..."
          for file in $APEX_FILES; do
            dir=$(dirname "$file")
            echo "Deploying $file from $dir"
            sf project deploy start --source-dir "$dir" --target-org ${{ secrets.SF_USERNAME }} --test-level RunLocalTests
          done

      # Step 7: Deploy LWC components
      - name: Deploy LWC components
        if: env.LWC_DIRS != ''
        run: |
          echo "üöÄ Deploying LWC components..."
          for dir in $LWC_DIRS; do
            echo "Deploying $dir"
            sf project deploy start --source-dir "$dir" --target-org ${{ secrets.SF_USERNAME }}
          done

      # Step 8: Deploy Aura components
      - name: Deploy Aura components
        if: env.AURA_DIRS != ''
        run: |
          echo "üöÄ Deploying Aura components..."
          for dir in $AURA_DIRS; do
            echo "Deploying $dir"
            sf project deploy start --source-dir "$dir" --target-org ${{ secrets.SF_USERNAME }}
          done

      # Step 9: Deploy Static Resources
      - name: Deploy Static Resources
        if: env.STATIC_DIRS != ''
        run: |
          echo "üöÄ Deploying Static Resources..."
          for dir in $STATIC_DIRS; do
            echo "Deploying $dir"
            sf project deploy start --source-dir "$dir" --target-org ${{ secrets.SF_USERNAME }}
          done

      # Step 10: Skip deploy if nothing changed
      - name: Skip deploy
        if: env.APEX_FILES == '' && env.LWC_DIRS == '' && env.AURA_DIRS == '' && env.STATIC_DIRS == ''
        run: echo "‚úÖ No Salesforce metadata changes detected. Skipping deployment."
